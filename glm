#!/usr/bin/env perl

use strict;
use FindBin qw($Bin $Script);

use lib "$Bin";
use glm_preprocessor;
use glm_database;
use glm_manifest;

my %opts = ();

use Getopt::Long;
Getopt::Long::Configure("bundling");
unless (GetOptions(
    \%opts,
    "preprocess",
    "regen=s",
    "help|h" => sub {print_usage();},
)) {
    print_usage();
};

# regen feature
if ($opts{regen}) {
    open(my $fh, "<", $opts{regen}) or die("Cannot open '$opts{regen}'");

    my $line = <$fh>;
    if ($line =~ m/Generated by: (\w+) (.*)/) {
        if ($Script ne $1) {
            die("Script '$1' does not match '$Script'");
        } else {
            @ARGV = split(/\s+/, $2);
        }
    } else {
        die("Cannot find 'Generated by:' line in '$opts{regen}'");
    }

    close($fh);

    # open for writing and redirect print statements to $fh
    open($fh, ">", $opts{regen}) or die("Cannot open '$opts{regen}'");
    select($fh);
}

print("# Generated by: $Script @ARGV\n\n");

# preprocess input
my $preprocessor = glm_preprocessor->new(filenames => \@ARGV);
if ($opts{preprocess}) {
    $preprocessor->print();
    exit(0);
}

my $db = glm_database->new(input_handle => $preprocessor->input_handle);
my $manifest = glm_manifest->new(db => $db);

exit(0);

sub print_usage {
    print <<EOF
Usage: $Script <file(s).glm>
EOF
}


__DATA__

=head1 NAME

$Script - manage gear lists

=head1 SYNOPSIS

B<$Script> --help|-h

B<$Script> <file(s).glm>

B<$Script> --regen <file>

=head1 OPTIONS

=over

=item B<--help|-h>

This message.

=item B<--preprocess>

Display output of preprocess only.

=item B<--regen>

Regenerate an output file using the "Generated by:" line.

=back

=head1 DESCRIPTION

$Script takes a gear database and a gear manifest to create a gear list.

=cut

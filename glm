#!/usr/bin/env perl

use strict;
use FindBin qw($Script);
use POSIX qw(floor);

use glm_database;

use constant KG_PER_OZ => 0.0283495231;

# modes
use constant {
    DB => 0,
    MANIFEST => 1
};

# states
use constant {
    SECTION => 0,
    ITEM => 1,
};

our %opts = ();

use Getopt::Long;
Getopt::Long::Configure("bundling");
unless (GetOptions(
    \%opts,
    "help|h" => sub {print_usage();},
)) {
    print_usage();
};

print_usage() && exit() if (scalar(@ARGV) != 2);

my $section = "none";
my %db;
my %manifest;

my $section_weight = 0;
my %section_weights;

my $db = glm_database->new(filename => shift);

{
    my $file = shift;
    my $state = SECTION;

    open(my $fh, "<$file") or die("$Script: could not open file $file\n");

    for (my $ln = 1; <$fh>; $ln++) {
        next if (/^\s*#/); # skip full-line comments
        s/#.*//; # remove in-line comments 

        if ($state == SECTION) {
            if (m/^\w+$/) {
                # section heading
                $section = $_;
                chomp($section);

                $section_weight = 0;
                print(uc());

                $state = ITEM;
            } elsif (m/^\s$/) {
                # blank between sections
                next;
            } else {
                die("$Script: error - cannot parse section @ $file:$ln\n");
            }
        } elsif ($state == ITEM) {
            if (m/^\s$/) {
                # end current section -> next section
                $section_weights{lc($section)} = $section_weight;
                printf("%-34s %15s\n", "SUBTOTAL", sprint_weight($section_weight));
                print();
                $state = SECTION;
            } elsif (m/^([+-]\d+)\s(.*$)/) {
                # item
                process_manifest_line($1, $2);
            } else {
                die("$Script: error - cannot parse item @ $file:$ln\n");
            }
        }
    }

    close($fh);
}

exit(0);

sub process_manifest_line {
    my ($count, $id) = @_;

    if ($id =~ /section::/) {
        # lookup section
        $id =~ s/section:://;
        die("$Script: section $id does not exist in db.\n") if (!exists($section_weights{$id}));
        my $weight = $count*$section_weights{$id};
        $section_weight += $weight;
        printf("%+3d %-30s %15s\n", $count, uc($id), sprint_weight(abs($weight)));
    } else {
        # lookup item
        #warn("$Script: id $id does not exist in db.\n") && return if (!exists($db{$id}));
        my $weight;
        my %item;
        if (exists($db->items->{$id})) {
            %item = %{$db->items->{$id}};
            $weight = $count*$item{weight};
            $section_weight += $weight;
            $weight = sprint_weight(abs($weight));
        } else {
            $weight = "TBD";
        }
        printf("%+3d %-30s %15s", $count, sprint_id($id), $weight);
        printf(" -- %s", $item{desc}) if (%item && exists($item{desc}));
        print("\n");
    }
}

sub sprint_id {
    my ($id) = @_;

    return join(' ', map {ucfirst($_)} split(/_|::/,$id));
}

sub sprint_weight {
    my ($kg) = @_;

    my $oz = $kg / KG_PER_OZ;
    my $lb = floor($oz/16);
    $oz -= $lb*16;

    return $lb ? sprintf("%dlb %.1foz", $lb, $oz) : sprintf("%.1foz", $oz);
}

sub debug {
    my ($s) = @_;
    print($s);
}

sub print_usage {
    print <<EOF
Usage: $Script <database> <list>
EOF
}


__DATA__

=head1 NAME

$Script - manage gear lists

=head1 SYNOPSIS

B<$Script> --help|-h

B<$Script> <database> <format>

=head1 OPTIONS

=over

=item B<--help|-h>

This message.

=back

=head1 DESCRIPTION

$Script takes a gear database and a gear format to create a gear list.

=cut
